local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Menu = Rayfield:CreateWindow({
	Name = "test",
	LoadingTitle = "test title1",
	LoadingSubtitle = "by me",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "TestFolder",
		FileName = "test_config"
	}
})

-- Teleports Tab
local TeleportsTab = Menu:CreateTab("Teleports", 4483345998)

TeleportsTab:CreateButton({
	Name = "Buttons",
	Callback = function()
		local Players = game:GetService("Players")
		local UserInputService = game:GetService("UserInputService")
		local RunService = game:GetService("RunService")

		local plr = Players.LocalPlayer
		local cam = workspace.CurrentCamera
		local visited = {}
		local bases = {}
		local runningTeleportSequence = false

		local function collectBases()
			bases = {}
			for _, map in pairs(workspace.Maps:GetChildren()) do
				if map:FindFirstChild("Gameplay") and map.Gameplay:FindFirstChild("Buttons") then
					for _, model in pairs(map.Gameplay.Buttons:GetChildren()) do
						if model:IsA("Model") and model:FindFirstChild("Base") then
							table.insert(bases, model.Base)
						end
					end
				end
			end
		end

		local function teleportSequence()
			if runningTeleportSequence then return end
			runningTeleportSequence = true
			collectBases()
			for _, base in ipairs(bases) do
				if not visited[base] then
					visited[base] = true
					local char = plr.Character or plr.CharacterAdded:Wait()
					local hrp = char:FindFirstChild("HumanoidRootPart")
					if not hrp then continue end
					local basePos = base.Position
					local offset = base.CFrame.LookVector.Unit * 5
					local finalPos = basePos + offset + Vector3.new(0, 3, 0)
					hrp.CFrame = CFrame.new(finalPos)
					RunService.RenderStepped:Wait()
					cam.CFrame = CFrame.new(cam.CFrame.Position, base.Position)
					task.wait(1)
				end
			end
			runningTeleportSequence = false
		end

		RunService.RenderStepped:Connect(function()
			if UserInputService:IsKeyDown(Enum.KeyCode.L) and not runningTeleportSequence then
				teleportSequence()
			end
		end)
	end
})

TeleportsTab:CreateButton({
	Name = "Survivor",
	Callback = function()
		local Players = game:GetService("Players")
		local UserInputService = game:GetService("UserInputService")
		local RunService = game:GetService("RunService")

		local plr = Players.LocalPlayer
		local runningSurvivorTrack = false

		local function teleportToSurvivor()
			if runningSurvivorTrack then return end
			runningSurvivorTrack = true
			local char = plr.Character or plr.CharacterAdded:Wait()
			local hrp = char:FindFirstChild("HumanoidRootPart")
			if not hrp then runningSurvivorTrack = false return end

			local targetChar = nil
			while not targetChar do
				for _, p in pairs(Players:GetPlayers()) do
					if p ~= plr and p.Character and p.Character:FindFirstChild("SurvivorHighlight") then
						targetChar = p.Character
						break
					end
				end
				RunService.Heartbeat:Wait()
			end

			local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
			if not targetHRP then runningSurvivorTrack = false return end
			local originalCFrame = hrp.CFrame
			local followTime = 1
			local startTime = tick()
			local followConn
			followConn = RunService.RenderStepped:Connect(function()
				if tick() - startTime >= followTime then
					followConn:Disconnect()
					hrp.CFrame = originalCFrame
					runningSurvivorTrack = false
					return
				end
				if targetHRP and targetHRP.Parent then
					local followOffset = targetHRP.CFrame.LookVector.Unit * -4 + Vector3.new(0, 2, 0)
					hrp.CFrame = CFrame.new(targetHRP.Position + followOffset)
				end
			end)
		end

		RunService.RenderStepped:Connect(function()
			if UserInputService:IsKeyDown(Enum.KeyCode.J) and not runningSurvivorTrack then
				teleportToSurvivor()
			end
		end)
	end
})

local MovementTab = Menu:CreateTab("Movements", 4483345998)

MovementTab:CreateSlider({
	Name = "Speed Change 1-1000",
	Range = {1, 1000},
	Increment = 1,
	Default = 16,
	Callback = function(Value)
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
	end
})

MovementTab:CreateSlider({
	Name = "Jump 1-1000",
	Range = {1, 1000},
	Increment = 1,
	Default = 50,
	Callback = function(Value)
		game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
	end
})

local OtherTab = Menu:CreateTab("Other", 4483345998)

OtherTab:CreateLabel("Soon")
