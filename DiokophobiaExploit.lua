local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

local plr = Players.LocalPlayer
local cam = Workspace.CurrentCamera

local char = plr.Character or plr.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

local visited = {}
local bases = {}
local started = false

local function collectBases()
	bases = {}
	for _, map in pairs(Workspace.Maps:GetChildren()) do
		if map:FindFirstChild("Gameplay") and map.Gameplay:FindFirstChild("Buttons") then
			for _, model in pairs(map.Gameplay.Buttons:GetChildren()) do
				if model:IsA("Model") and model:FindFirstChild("Base") then
					table.insert(bases, model.Base)
				end
			end
		end
	end
end

local function teleportSequence()
	collectBases()

	for _, base in ipairs(bases) do
		if not visited[base] then
			visited[base] = true

			local basePos = base.Position
			local lookVec = (base.CFrame.LookVector).Unit
			local teleportPos = basePos + (lookVec * 5) + Vector3.new(0, 3, 0)

			-- Teleport player (no rotation)
			hrp.CFrame = CFrame.new(teleportPos)

			-- Camera looks at the Base from the player position
			cam.CameraType = Enum.CameraType.Scriptable
			cam.CFrame = CFrame.new(cam.CFrame.Position, basePos)

			task.wait(1)
		end
	end

	-- Reset camera
	cam.CameraType = Enum.CameraType.Custom
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == Enum.KeyCode.K and not started then
		started = true
		teleportSequence()
	end
end)
