local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

local plr = Players.LocalPlayer
local cam = Workspace.CurrentCamera

local started = false
local visited = {}

local function getHRP()
	local char = plr.Character or plr.CharacterAdded:Wait()
	return char:WaitForChild("HumanoidRootPart")
end

local function collectBaseModels()
	local models = {}
	for _, map in pairs(Workspace.Maps:GetChildren()) do
		local gameplay = map:FindFirstChild("Gameplay")
		if gameplay and gameplay:FindFirstChild("Buttons") then
			for _, model in pairs(gameplay.Buttons:GetChildren()) do
				if model:IsA("Model") and model:FindFirstChild("Base") then
					table.insert(models, model)
				end
			end
		end
	end
	return models
end

local function teleportAndLook(model)
	local base = model.Base
	local hrp = getHRP()

	-- Compute target position 5 studs in front of base
	local forward = base.CFrame.LookVector.Unit
	local teleportPos = base.Position + forward * 5 + Vector3.new(0, 3, 0)

	-- Teleport player
	hrp.CFrame = CFrame.new(teleportPos)

	task.wait(0.15) -- Wait to stabilize

	-- Camera look at base using LookVector
	local camPos = hrp.Position + Vector3.new(0, 2, 0)
	local lookDirection = (base.Position - camPos).Unit
	local right = Vector3.new(0, 1, 0):Cross(lookDirection).Unit
	local up = lookDirection:Cross(right).Unit

	cam.CameraType = Enum.CameraType.Scriptable
	cam.CFrame = CFrame.fromMatrix(camPos, right, up)
end

local function runSequence()
	local models = collectBaseModels()

	for _, model in ipairs(models) do
		if not visited[model] then
			visited[model] = true
			teleportAndLook(model)
			task.wait(1)
		end
	end

	-- Restore camera control
	cam.CameraType = Enum.CameraType.Custom
end

UserInputService.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == Enum.KeyCode.K and not started then
		started = true
		runSequence()
	end
end)
